name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (format: v0.0.0)'
        required: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add .local/bin to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.0

      - name: Run test
        run: poetry run python tests/e2e.py

  release:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate version
        id: validate
        run: |
          VERSION=${{ github.event.inputs.version }}
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version $VERSION is not in a valid format!"
            exit 1
          fi
          echo "::set-output name=version::$VERSION"

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.0

      - name: Run compile script
        run: |
          ./compile.sh ${{ steps.validate.outputs.version }}

      - name: Create Git tag
        run: |
          git config --local user.email "niclas.haderer.dev@gmail.com"
          git config --local user.name "Niclas Haderer"
          git tag -a ${{ steps.validate.outputs.version }} -m "Release ${{ steps.validate.outputs.version }}"
          git push origin --tags

      - name: Create GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          tag: ${{ steps.validate.outputs.version }}
          release_name: Release ${{ steps.validate.outputs.version }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: bin/*
          overwrite: true
          file_glob: true
